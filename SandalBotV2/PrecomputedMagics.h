#ifndef PRECOMPUTEDMAGICS_H
#define PRECOMPUTEDMAGICS_H

#include <cstdint>
#include <vector>

namespace SandalBot {

	// PrecomputedMagics stores hashtable to orthogonal and diagonal moves via indexing by blocker bitboards.
	// Hashtables are indexed by: (blockerboard * magic number) >> right shift number
	class PrecomputedMagics {
	private:
		#pragma pack(push, 1)
		struct MagicInfo {
			uint64_t magic;
			uint8_t rightShift;
		};
		#pragma pack(pop)

		// Magic Information
		MagicInfo orthogonalMagics[64]{ { 9222238992490216896ULL, 51 }, { 14555654121090864632ULL, 52 }, { 13544132741376902154ULL, 52 }, { 7025624378269270116ULL, 52 }, { 16381843578018484987ULL, 52 }, { 18059393113545408125ULL, 52 }, { 14552969406677812391ULL, 52 }, { 13120574539353453305ULL, 51 }, { 10024652856517698217ULL, 52 }, { 2718927102778132419ULL, 53 }, { 5149416267332971932ULL, 53 }, { 14892133925010504892ULL, 53 }, { 6864309449176154492ULL, 53 }, { 16350068759259571012ULL, 53 }, { 2706902229429942429ULL, 53 }, { 18026831610546011761ULL, 52 }, { 5214640611558625309ULL, 52 }, { 8068912718637888210ULL, 53 }, { 6078150226365970059ULL, 53 }, { 8481489593965881063ULL, 53 }, { 10806754542236793564ULL, 53 }, { 2708339630728156018ULL, 53 }, { 12389217390138704731ULL, 53 }, { 9973852494190343735ULL, 52 }, { 17449592415955330508ULL, 52 }, { 9860417695546147670ULL, 53 }, { 17807237003954522973ULL, 53 }, { 6013354839270866609ULL, 53 }, { 3190154166972551181ULL, 53 }, { 4282798829008141793ULL, 53 }, { 200546004457162994ULL, 53 }, { 12801580392322315230ULL, 52 }, { 11919838892714361152ULL, 52 }, { 9266249823710981234ULL, 53 }, { 6112860337687516945ULL, 53 }, { 2604139749388352318ULL, 53 }, { 15159884555973480780ULL, 53 }, { 13032606230223260423ULL, 53 }, { 4811764303914850901ULL, 53 }, { 7595736094930903883ULL, 52 }, { 2934949575098192596ULL, 52 }, { 14141486660886073344ULL, 53 }, { 3476484300324293761ULL, 53 }, { 7004691459998608878ULL, 53 }, { 16082943213102022608ULL, 53 }, { 8661058006428169317ULL, 53 }, { 3458834056355856799ULL, 53 }, { 10604587542355509244ULL, 52 }, { 5511099370773106520ULL, 52 }, { 6448012022138372352ULL, 53 }, { 16128392037010901504ULL, 53 }, { 18366243025382788608ULL, 53 }, { 10442611154696876033ULL, 53 }, { 1526219133187542819ULL, 53 }, { 7247585580073207228ULL, 53 }, { 6095993393002365882ULL, 52 }, { 8829365849805027062ULL, 51 }, { 2606708742896799962ULL, 52 }, { 10020411209037163674ULL, 52 }, { 9031189455634213118ULL, 52 }, { 7257211265169427654ULL, 52 }, { 16859788191231848242ULL, 52 }, { 12941444287740115780ULL, 52 }, { 4438557872706330590ULL, 51 } };
		MagicInfo diagonalMagics[64]{ { 2502349624283097235ULL, 57 }, { 11043467321474647217ULL, 58 }, { 15682091370055775344ULL, 58 }, { 3984646600960553589ULL, 58 }, { 10377741116788028858ULL, 58 }, { 7075841757963391300ULL, 58 }, { 1062258574023332480ULL, 58 }, { 9212481048514735676ULL, 57 }, { 7297966747818850985ULL, 58 }, { 11347935643973309809ULL, 58 }, { 3312125413124460164ULL, 58 }, { 3994567664716406276ULL, 58 }, { 10034307195039759434ULL, 58 }, { 9423363399531150024ULL, 58 }, { 7990037761501575198ULL, 58 }, { 7021897648429007762ULL, 58 }, { 14076388294507702420ULL, 58 }, { 12094943125597808513ULL, 58 }, { 9204778503947632448ULL, 56 }, { 334658158656480149ULL, 56 }, { 16272361794963013204ULL, 56 }, { 1374024160897133955ULL, 56 }, { 18139798987682615612ULL, 58 }, { 3240410188264423738ULL, 58 }, { 4595519674042187267ULL, 58 }, { 9805894176247507001ULL, 58 }, { 12082020717491938045ULL, 56 }, { 17994389357673944065ULL, 54 }, { 16146754444649588332ULL, 54 }, { 3424690912617738155ULL, 56 }, { 10967750135165054835ULL, 58 }, { 15781752833788770817ULL, 58 }, { 17986298381405755026ULL, 58 }, { 18334670688246082457ULL, 58 }, { 3747604200739723940ULL, 56 }, { 5582835472970136134ULL, 54 }, { 11715737124972044498ULL, 54 }, { 9336241046287547404ULL, 56 }, { 17385864194688148674ULL, 58 }, { 6079637550790973304ULL, 58 }, { 17477818636279582130ULL, 58 }, { 3555010550336301987ULL, 58 }, { 1113730446681776397ULL, 56 }, { 4601683408429400201ULL, 56 }, { 4026349199224500213ULL, 56 }, { 18387326259163786827ULL, 56 }, { 13471033986868310649ULL, 58 }, { 11247350495703753562ULL, 58 }, { 4656286822743886099ULL, 58 }, { 18013209080356836177ULL, 58 }, { 14986183212871114575ULL, 58 }, { 14532844199656797956ULL, 58 }, { 6341845687492049285ULL, 58 }, { 3580665891282403731ULL, 58 }, { 4446941560364347557ULL, 58 }, { 17709857600175900721ULL, 58 }, { 8720635721062059597ULL, 57 }, { 12519972861825906729ULL, 58 }, { 6493387679277327416ULL, 58 }, { 16388411090020491765ULL, 58 }, { 7903856953147483560ULL, 58 }, { 11069457155342024249ULL, 58 }, { 10225600112766264093ULL, 58 }, { 11557011938342712892ULL, 57 } };

		// Maximum Indexes
		int maxOrthogonalIndexes[64] { 8190, 4091, 4093, 4094, 4094, 4094, 4094, 8188, 4095, 2045, 2046, 2046, 2046, 2045, 2046, 4094, 4024, 2046, 2046, 2046, 2046, 2046, 2046, 4091, 4094, 2043, 2046, 2045, 2046, 2046, 2046, 4094, 4094, 2046, 2046, 2046, 2045, 2044, 2045, 4094, 4092, 2046, 2045, 2044, 2046, 2046, 2046, 4094, 4091, 2047, 2046, 2045, 2044, 2046, 2046, 4094, 8190, 4094, 4094, 4095, 4095, 4091, 4094, 8190 };
		int maxDiagonalIndexes[64] { 125, 59, 62, 62, 63, 61, 62, 126, 60, 62, 60, 63, 61, 62, 62, 61, 61, 61, 254, 254, 253, 254, 61, 63, 60, 61, 255, 1016, 1022, 253, 62, 61, 62, 57, 254, 1020, 1019, 255, 61, 62, 62, 62, 255, 247, 254, 253, 63, 61, 62, 62, 62, 58, 60, 61, 62, 59, 127, 62, 63, 61, 63, 62, 60, 117 };

		// Move Maps
		uint64_t* orthogonalMoves[64];
		uint64_t* diagonalMoves[64];
	public:
		PrecomputedMagics();
		~PrecomputedMagics();
		void addOrthogonalMoves(int square, std::vector<uint64_t>& blockers, std::vector<uint64_t>& movementBoards);
		void addDiagonalMoves(int square, std::vector<uint64_t>& blockers, std::vector<uint64_t>& movementBoards);
		uint64_t getOrthogonalMovement(const int square, const uint64_t blockers) const {
			return orthogonalMoves[square][(blockers * orthogonalMagics[square].magic) >> orthogonalMagics[square].rightShift];
		}
		uint64_t getDiagonalMovement(const int square, const uint64_t blockers) const {
			return diagonalMoves[square][(blockers * diagonalMagics[square].magic) >> diagonalMagics[square].rightShift];
		}
	};

}

#endif // !PRECOMPUTEDMAGICS_H
